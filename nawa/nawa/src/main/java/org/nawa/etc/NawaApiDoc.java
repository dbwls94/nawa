package org.nawa.etc;

import org.json.JSONArray;
import org.json.JSONObject;

public class NawaApiDoc {
	public static JSONArray getApiDoc(){
		JSONArray doc = new JSONArray();
		
		//login servlet
		JSONObject loginServlet = new JSONObject();
		doc.put(loginServlet);
		loginServlet.put("name", "Login");
		loginServlet.put("methods", new JSONArray()
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Login")
				.put("desc", "로그인")
				.put("parameter", new JSONArray()
					.put("email : 로그인하려는 이메일")
					.put("password: sha512로 암호화된 패스워드"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\"}")
					.put("실패시 { success: \"0\", msg: (why failed) }"))));
		
		//logout servlet
		JSONObject logoutServlet = new JSONObject();
		doc.put(logoutServlet);
		logoutServlet.put("name", "Logout");
		logoutServlet.put("methods", new JSONArray()
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/Logout")
				.put("desc", "로그아웃")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\"}")
					.put("실패시 { success: \"0\", msg: (why failed) }"))));
		
		//project servlet
		JSONObject projectServlet = new JSONObject();
		doc.put(projectServlet);
		projectServlet.put("name", "Project");
		projectServlet.put("methods", new JSONArray()
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/{projectId}")
				.put("desc", "{projectId}에 대한 프로제긑 정보 출력")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", project: [project info] }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/List/{page}")
				.put("desc", "프로젝트 리스트 출력")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 " + new JSONObject()
						.put("success", "1")
						.put("project", new JSONObject()
							.put("id", "project_info.id")
							.put("participant_actual_count", "해당 프로젝트의 현재 참여인원")
							.put("regdate", "project_info.regdate")
							.put("comments_count", "댓글 수")
							.put("max_user_count", "project_info.max_user_count")
							.put("leader_email", "project_info.leader_email")
							.put("title", "project_info.title")
							.put("place", "project_info.place")
							.put("description", "project_info.description")
							.put("description_title", "project_info.description_title")
							.put("meeting_date", "project_info.meeting_date")
							.put("meeting_time", "project_info.meeting_time")
							.put("leader_name", "추진자의 이름")
							.put("is_active", "모집중이면 1, 모집완료면 0")
							.put("recruit_due_date", "project_info.recruit_due_date")
							.put("recruit_due_date_relative", "recruit_due_date의 D-? 형태의 날짜")
							.put("long_project", "project_info.long_project")).toString())
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/isParticipated/{projectId}")
				.put("desc", "로그인된 사용자가 해당 프로젝트에 참가중인지 여부 출력")
				.put("parameter", new JSONArray()
					.put("email: 프로젝트에 참가중인지 확인할 사용자의 이메일"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", isParticipated: [true or false] }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/WaitingAcceptUsers/{projectId}")
				.put("desc", "해당 프로젝트에 참여 승인 대기 중인 사용자 리스트 출력\n해당 프로젝트의 개설자만 호출 가능함")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", waitings : [대기중인 사용자들의 user info 출력] }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/ParticipatingUsers/{projectId}")
				.put("desc", "해당 프로젝트에 참여중인 사용자 리스트 출력")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", waitings : [프로젝트에 참여중인 사용자들의 user info 출력] }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/ParticipatingProjects/{email}")
				.put("desc", "해당 사용자가 참여중인 프로젝트 리스트 출력")
				.put("parameter", new JSONArray()
					.put("include-not-accepted(optional): 승인되지 않은 프로젝트도 포함할지 여부 (true/false)(default false)"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 " + new JSONObject()
					.put("success", "1")
					.put("project", new JSONObject()
						.put("id", "project_info.id")
						.put("participant_actual_count", "해당 프로젝트의 현재 참여인원")
						.put("regdate", "project_info.regdate")
						.put("comments_count", "댓글 수")
						.put("max_user_count", "project_info.max_user_count")
						.put("leader_email", "project_info.leader_email")
						.put("title", "project_info.title")
						.put("place", "project_info.place")
						.put("description", "project_info.description")
						.put("description_title", "project_info.description_title")
						.put("meeting_date", "project_info.meeting_date")
						.put("meeting_time", "project_info.meeting_time")
						.put("leader_name", "추진자의 이름")
						.put("is_active", "모집중이면 1, 모집완료면 0")
						.put("recruit_due_date", "project_info.recruit_due_date")
						.put("recruit_due_date_relative", "recruit_due_date의 D-? 형태의 날짜")
						.put("long_project", "project_info.long_project")).toString())
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/LeadingProjects/{email}")
				.put("desc", "해당 사용자가 추진중인 프로젝트 리스트 출력")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 " + new JSONObject()
					.put("success", "1")
					.put("project", new JSONObject()
						.put("id", "project_info.id")
						.put("participant_actual_count", "해당 프로젝트의 현재 참여인원")
						.put("regdate", "project_info.regdate")
						.put("comments_count", "댓글 수")
						.put("max_user_count", "project_info.max_user_count")
						.put("leader_email", "project_info.leader_email")
						.put("title", "project_info.title")
						.put("place", "project_info.place")
						.put("description", "project_info.description")
						.put("description_title", "project_info.description_title")
						.put("meeting_date", "project_info.meeting_date")
						.put("meeting_time", "project_info.meeting_time")
						.put("leader_name", "추진자의 이름")
						.put("is_active", "모집중이면 1, 모집완료면 0")
						.put("recruit_due_date", "project_info.recruit_due_date")
						.put("recruit_due_date_relative", "recruit_due_date의 D-? 형태의 날짜")
						.put("long_project", "project_info.long_project")).toString())
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/Project/")
				.put("desc", "프로젝트 생성")
				.put("parameter", new JSONArray()
					.put("(form data)")
					.put("title: 타이틀")
					.put("description_title: 프로젝트 설명 타이틀")
					.put("description: 프로젝트 설명")
					.put("place: 장소")
					.put("meeting_date: 모임 날짜")
					.put("meeting_time: 모임 시간(string)")
					.put("max_user_count: 최대 참여 사용자수")
					.put("recruit_due_date: 참가 마감일 (yyyy-MM-dd HH:mm 형식)")
					.put("long_project: 1:(장기 모임), 2:(단기 모임)")
					.put("project_pics: 프로젝트 사진 (file)"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/Project/Participate/{projectId}")
				.put("desc", "프로젝트 참여 요청")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/Project/AcceptParticipate/{projectId}")
				.put("desc", "프로젝트 참가 승인/거절")
				.put("parameter", new JSONArray()
					.put("participationUserEmail: 참가 승인/거부하는 사용자 이메일")
					.put("accept: true/false (참가 승인/거절 여부)"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "PUT")
				.put("url", "/Project/")
				.put("desc", "프로젝트 수정")
				.put("parameter", new JSONArray()
					.put("(form data)")
					.put("id: 수정할 프로젝트의 id") 
					.put("title: 타이틀")
					.put("description: 프로젝트 설명")
					.put("description_title: 프로젝트 설명 타이틀")
					.put("place: 장소")
					.put("meeting_date: 모임 날짜")
					.put("meeting_time: 모임 시간(string)")
					.put("max_user_count: 최대 참여 사용자수")
					.put("recruit_due_date: 참가 마감일 (yyyy-MM-dd HH:mm 형식)")
					.put("long_project: 1:(장기 모임), 2:(단기 모임)")
					.put("project_pics: 프로젝트 사진 (file)"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "DELETE")
				.put("url", "/Project/Participate/{projectId}")
				.put("desc", "프로젝트 탈퇴")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Project/Pic/{projectId}")
				.put("desc", "프로젝트 이미지")
				.put("parameter", new JSONArray()
					.put("width: 해상도 너비")
					.put("height: 해상도 높이"))
				.put("returnType", "image")
				.put("returns", new JSONArray()
					.put("사진 존재하지 않을 경우 default 이미지 출력"))));
	
		//comment servlet
		JSONObject commentServlet = new JSONObject();
		doc.put(commentServlet);
		commentServlet.put("name", "Comment");
		commentServlet.put("methods", new JSONArray()
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Comment/{projectId}")
				.put("desc", "해당 프로젝트에 달린 댓글 리스트 출력")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", comments: [comments in project] }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/Comment")
				.put("desc", "댓글 등록")
				.put("parameter", new JSONArray()
					.put("projectId: 댓글이 달릴 프로젝트 아이디")
					.put("content: 댓글 내용")
					.put("parent_seq: 대댓글일 경우 부모 댓글의 sequence"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "PUT")
				.put("url", "/Comment")
				.put("desc", "댓글 수정")
				.put("parameter", new JSONArray()
					.put("seq: 수정할 댓글의 sequence")
					.put("projectId: 수정할 댓글의 프로젝트 아이디")
					.put("content: 댓글 내용"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "DELETE")
				.put("url", "/Comment")
				.put("desc", "댓글 삭제")
				.put("parameter", new JSONArray()
					.put("seq: 삭제할 댓글의 sequence")
					.put("projectId: 삭제할 댓글의 프로젝트 아이디"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }"))));
		
		//user servlet
		JSONObject userServlet = new JSONObject();
		doc.put(userServlet);
		userServlet.put("name", "User");
		userServlet.put("methods", new JSONArray()
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/User")
				.put("desc", "회원 가입")
				.put("parameter", new JSONArray()
					.put("(form data)")
					.put("email: 이메일")
					.put("password: sha512로 암호화된 패스워드")
					.put("name: 사용자 이름")
					.put("gender: 1:(남자), 2:(여자)")
					.put("facebook_access_token: ")
					.put("userPic: 사용자 사진(file)(optional)"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", loginToken: (login token) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "POST")
				.put("url", "/User/Relation")
				.put("desc", "팔로우")
				.put("parameter", new JSONArray()
					.put("targetEmail: 팔로우할 상대 email"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", loginToken: (login token) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "PUT")
				.put("url", "/User/{email}")
				.put("desc", "회원정보 수정")
				.put("parameter", new JSONArray()
					.put("(form data)")
					.put("password: sha512로 암호화된 패스워드")
					.put("name: 사용자 이름")
					.put("gender: 1:(남자), 2:(여자)")
					.put("facebook_access_token: ")
					.put("userPic: 사용자 사진(file)(optional)"))
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", loginToken: (login token) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "DELETE")
				.put("url", "/User/Relation/{targetEmail}")
				.put("desc", "언팔로우")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\" }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/User/isEmailExists/{email}")
				.put("desc", "이메일 중복검사")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", isEmailExists: true/false }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/User/{email}")
				.put("desc", "사용자 정보 출력")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시, 로그인 안된 경우 { success: \"1\", user: {" + 
						"email: (string)," +
						"gender: (int)," +
						"regdate: (string)," +
						"facebook_access_token: (string)" +
						"}")
					.put("성공시, 로그인된 경우 { success: \"1\", user: {" + 
						"email: (string)," +
						"gender: (int)," +
						"regdate: (string)," +
						"facebook_access_token: (string)," +
						"facebook_access_token: (string)," +
						"am_i_follow_him: (int)(1: true, 0: false)," +
						"is_him_follow_me: (int)(1: true, 0: false)" +
						"}")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/User/Relation/Following/{email}")
				.put("desc", "팔로잉 목록")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", followings: (following user infos) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/User/Relation/Followed/{email}")
				.put("desc", "팔로워 목록")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", followings: (followed user infos) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/User/Profile/{email}")
				.put("desc", "해당 사용자의 프로필 정보")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", profile: {"
							+ "leading-proejcts: (leading-projects), "
							+ "participating-projects: (participating-projects), "
							+ "user-info: (user-info), "
							+ "followings: (followings), "
							+ "followers: (followers) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/User/Pic/{email}")
				.put("desc", "해당 사용자의 이미지")
				.put("parameter", new JSONArray()
					.put("width: 해상도 너비")
					.put("height: 해상도 높이"))
				.put("returnType", "image")
				.put("returns", new JSONArray()
					.put("해당 이미지가 없을 경우 default 이미지가 반환됨"))));
	
		//search servlet
		JSONObject searchServlet = new JSONObject();
		doc.put(searchServlet);
		searchServlet.put("name", "Search");
		searchServlet.put("methods", new JSONArray()
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Search/Project/{keyword}")
				.put("desc", "프로젝트 검색")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", result: (search result in project) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Search/MyProject/{keyword}")
				.put("desc", "내가 참여한 프로젝트 중에서 검샋")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", result: (search result in my project) }")
					.put("실패시 { success: \"0\", msg: (why failed) }")))
			.put(new JSONObject()
				.put("method", "GET")
				.put("url", "/Search/User/{keyword}")
				.put("desc", "사용자 이름 검색")
				.put("parameter", new JSONArray())
				.put("returnType", "json")
				.put("returns", new JSONArray()
					.put("성공시 { success: \"1\", result: (search result in user) }")
					.put("실패시 { success: \"0\", msg: (why failed) }"))));
		
		return doc;
	} //getApiDoc
} //class